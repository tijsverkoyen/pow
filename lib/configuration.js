// Generated by CoffeeScript 1.10.0
(function() {
  var Configuration, Logger, async, compilePattern, fs, getFilenamesForHost, getUserEnv, libraryPath, mkdirp, path, rstat, sourceScriptEnv,
    slice = [].slice;

  fs = require("fs");

  path = require("path");

  async = require("async");

  Logger = require("./logger");

  mkdirp = require("./util").mkdirp;

  sourceScriptEnv = require("./util").sourceScriptEnv;

  getUserEnv = require("./util").getUserEnv;

  module.exports = Configuration = (function() {
    Configuration.userConfigurationPath = path.join(process.env.HOME, ".powconfig");

    Configuration.loadUserConfigurationEnvironment = function(callback) {
      return getUserEnv((function(_this) {
        return function(err, env) {
          var p;
          if (err) {
            return callback(err);
          } else {
            return fs.exists(p = _this.userConfigurationPath, function(exists) {
              if (exists) {
                return sourceScriptEnv(p, env, callback);
              } else {
                return callback(null, env);
              }
            });
          }
        };
      })(this));
    };

    Configuration.getUserConfiguration = function(callback) {
      return this.loadUserConfigurationEnvironment(function(err, env) {
        if (err) {
          return callback(err);
        } else {
          return callback(null, new Configuration(env));
        }
      });
    };

    Configuration.optionNames = ["bin", "dstPort", "httpPort", "dnsPort", "timeout", "workers", "domains", "extDomains", "hostRoot", "logRoot", "rvmPath"];

    function Configuration(env) {
      if (env == null) {
        env = process.env;
      }
      this.loggers = {};
      this.initialize(env);
    }

    Configuration.prototype.initialize = function(env1) {
      var base, base1, ref, ref1, ref10, ref11, ref12, ref13, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
      this.env = env1;
      this.bin = (ref = this.env.POW_BIN) != null ? ref : path.join(__dirname, "../bin/pow");
      this.dstPort = (ref1 = this.env.POW_DST_PORT) != null ? ref1 : 80;
      this.httpPort = (ref2 = this.env.POW_HTTP_PORT) != null ? ref2 : 20559;
      this.dnsPort = (ref3 = this.env.POW_DNS_PORT) != null ? ref3 : 20560;
      this.timeout = (ref4 = this.env.POW_TIMEOUT) != null ? ref4 : 15 * 60;
      this.workers = (ref5 = this.env.POW_WORKERS) != null ? ref5 : 2;
      this.domains = (ref6 = (ref7 = this.env.POW_DOMAINS) != null ? ref7 : this.env.POW_DOMAIN) != null ? ref6 : "dev";
      this.extDomains = (ref8 = this.env.POW_EXT_DOMAINS) != null ? ref8 : [];
      this.domains = (ref9 = typeof (base = this.domains).split === "function" ? base.split(",") : void 0) != null ? ref9 : this.domains;
      this.extDomains = (ref10 = typeof (base1 = this.extDomains).split === "function" ? base1.split(",") : void 0) != null ? ref10 : this.extDomains;
      this.allDomains = this.domains.concat(this.extDomains);
      this.allDomains.push(/\d+\.\d+\.\d+\.\d+\.xip\.io$/, /[0-9a-z]{1,7}\.xip\.io$/);
      this.supportRoot = libraryPath("Application Support", "Pow");
      this.hostRoot = (ref11 = this.env.POW_HOST_ROOT) != null ? ref11 : path.join(this.supportRoot, "Hosts");
      this.logRoot = (ref12 = this.env.POW_LOG_ROOT) != null ? ref12 : libraryPath("Logs", "Pow");
      this.rvmPath = (ref13 = this.env.POW_RVM_PATH) != null ? ref13 : path.join(process.env.HOME, ".rvm/scripts/rvm");
      this.dnsDomainPattern = compilePattern(this.domains);
      return this.httpDomainPattern = compilePattern(this.allDomains);
    };

    Configuration.prototype.toJSON = function() {
      var j, key, len, ref, result;
      result = {};
      ref = this.constructor.optionNames;
      for (j = 0, len = ref.length; j < len; j++) {
        key = ref[j];
        result[key] = this[key];
      }
      return result;
    };

    Configuration.prototype.getLogger = function(name) {
      var base;
      return (base = this.loggers)[name] || (base[name] = new Logger(path.join(this.logRoot, name + ".log")));
    };

    Configuration.prototype.disableRvmDeprecationNotices = function() {
      return fs.writeFile(path.join(this.supportRoot, ".disableRvmDeprecationNotices"), "");
    };

    Configuration.prototype.enableRvmDeprecationNotices = function() {
      return fs.unlink(path.join(this.supportRoot, ".disableRvmDeprecationNotices"));
    };

    Configuration.prototype.findHostConfiguration = function(host, callback) {
      if (host == null) {
        host = "";
      }
      return this.gatherHostConfigurations((function(_this) {
        return function(err, hosts) {
          var config, domain, file, j, k, len, len1, ref, ref1;
          if (err) {
            return callback(err);
          }
          ref = _this.allDomains;
          for (j = 0, len = ref.length; j < len; j++) {
            domain = ref[j];
            ref1 = getFilenamesForHost(host, domain);
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              file = ref1[k];
              if (config = hosts[file]) {
                return callback(null, domain, config);
              }
            }
          }
          if (config = hosts["default"]) {
            return callback(null, _this.allDomains[0], config);
          }
          return callback(null);
        };
      })(this));
    };

    Configuration.prototype.gatherHostConfigurations = function(callback) {
      var hosts;
      hosts = {};
      return mkdirp(this.hostRoot, (function(_this) {
        return function(err) {
          if (err) {
            return callback(err);
          }
          return fs.readdir(_this.hostRoot, function(err, files) {
            if (err) {
              return callback(err);
            }
            return async.forEach(files, function(file, next) {
              var name, root;
              root = path.join(_this.hostRoot, file);
              name = file.toLowerCase();
              return rstat(root, function(err, stats, path) {
                if (stats != null ? stats.isDirectory() : void 0) {
                  hosts[name] = {
                    root: path
                  };
                  return next();
                } else if (stats != null ? stats.isFile() : void 0) {
                  return fs.readFile(path, 'utf-8', function(err, data) {
                    if (err) {
                      return next();
                    }
                    data = data.trim();
                    if (data.length < 10 && !isNaN(parseInt(data))) {
                      hosts[name] = {
                        url: "http://localhost:" + (parseInt(data))
                      };
                    } else if (data.match("https?://")) {
                      hosts[name] = {
                        url: data
                      };
                    }
                    return next();
                  });
                } else {
                  return next();
                }
              });
            }, function(err) {
              return callback(err, hosts);
            });
          });
        };
      })(this));
    };

    return Configuration;

  })();

  libraryPath = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return path.join.apply(path, [process.env.HOME, "Library"].concat(slice.call(args)));
  };

  getFilenamesForHost = function(host, domain) {
    var i, j, length, parts, ref, ref1, ref2, results;
    host = host.toLowerCase();
    if (domain.test != null) {
      domain = (ref = (ref1 = host.match(domain)) != null ? ref1[0] : void 0) != null ? ref : "";
    }
    if (host.slice(-domain.length - 1) === ("." + domain)) {
      parts = host.slice(0, -domain.length - 1).split(".");
      length = parts.length;
      results = [];
      for (i = j = 0, ref2 = length; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
        results.push(parts.slice(i, length).join("."));
      }
      return results;
    } else {
      return [];
    }
  };

  rstat = function(path, callback) {
    return fs.lstat(path, function(err, stats) {
      if (err) {
        return callback(err);
      } else if (stats != null ? stats.isSymbolicLink() : void 0) {
        return fs.realpath(path, function(err, realpath) {
          if (err) {
            return callback(err);
          } else {
            return rstat(realpath, callback);
          }
        });
      } else {
        return callback(err, stats, path);
      }
    });
  };

  compilePattern = function(domains) {
    return RegExp("((^|\\.)(" + (domains.join("|")) + "))\\.?$", "i");
  };

}).call(this);
