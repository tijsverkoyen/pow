// Generated by CoffeeScript 1.10.0
(function() {
  var Daemon, DnsServer, EventEmitter, HttpServer, fs, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  EventEmitter = require("events").EventEmitter;

  HttpServer = require("./http_server");

  DnsServer = require("./dns_server");

  fs = require("fs");

  path = require("path");

  module.exports = Daemon = (function(superClass) {
    extend(Daemon, superClass);

    function Daemon(configuration) {
      var hostRoot;
      this.configuration = configuration;
      this.stop = bind(this.stop, this);
      this.hostRootChanged = bind(this.hostRootChanged, this);
      this.httpServer = new HttpServer(this.configuration);
      this.dnsServer = new DnsServer(this.configuration);
      process.on("SIGINT", this.stop);
      process.on("SIGTERM", this.stop);
      process.on("SIGQUIT", this.stop);
      hostRoot = this.configuration.hostRoot;
      this.restartFilename = path.join(hostRoot, "restart.txt");
      this.on("start", (function(_this) {
        return function() {
          return _this.watcher = fs.watch(hostRoot, {
            persistent: false
          }, _this.hostRootChanged);
        };
      })(this));
      this.on("stop", (function(_this) {
        return function() {
          var ref;
          return (ref = _this.watcher) != null ? ref.close() : void 0;
        };
      })(this));
    }

    Daemon.prototype.hostRootChanged = function() {
      return fs.exists(this.restartFilename, (function(_this) {
        return function(exists) {
          if (exists) {
            return _this.restart();
          }
        };
      })(this));
    };

    Daemon.prototype.restart = function() {
      return fs.unlink(this.restartFilename, (function(_this) {
        return function(err) {
          if (!err) {
            return _this.emit("restart");
          }
        };
      })(this));
    };

    Daemon.prototype.start = function() {
      var dnsPort, flunk, httpPort, pass, ref, startServer;
      if (this.starting || this.started) {
        return;
      }
      this.starting = true;
      startServer = function(server, port, callback) {
        return process.nextTick(function() {
          var err, error;
          try {
            server.on('error', callback);
            server.once('listening', function() {
              server.removeListener('error', callback);
              return callback();
            });
            return server.listen(port);
          } catch (error) {
            err = error;
            return callback(err);
          }
        });
      };
      pass = (function(_this) {
        return function() {
          _this.starting = false;
          _this.started = true;
          return _this.emit("start");
        };
      })(this);
      flunk = (function(_this) {
        return function(err) {
          _this.starting = false;
          try {
            _this.httpServer.close();
          } catch (undefined) {}
          try {
            _this.dnsServer.close();
          } catch (undefined) {}
          return _this.emit("error", err);
        };
      })(this);
      ref = this.configuration, httpPort = ref.httpPort, dnsPort = ref.dnsPort;
      return startServer(this.httpServer, httpPort, (function(_this) {
        return function(err) {
          if (err) {
            return flunk(err);
          } else {
            return startServer(_this.dnsServer, dnsPort, function(err) {
              if (err) {
                return flunk(err);
              } else {
                return pass();
              }
            });
          }
        };
      })(this));
    };

    Daemon.prototype.stop = function() {
      var stopServer;
      if (this.stopping || !this.started) {
        return;
      }
      this.stopping = true;
      stopServer = function(server, callback) {
        return process.nextTick(function() {
          var close, err, error;
          try {
            close = function() {
              server.removeListener("close", close);
              return callback(null);
            };
            server.on("close", close);
            return server.close();
          } catch (error) {
            err = error;
            return callback(err);
          }
        });
      };
      return stopServer(this.httpServer, (function(_this) {
        return function() {
          return stopServer(_this.dnsServer, function() {
            _this.stopping = false;
            _this.started = false;
            return _this.emit("stop");
          });
        };
      })(this));
    };

    return Daemon;

  })(EventEmitter);

}).call(this);
