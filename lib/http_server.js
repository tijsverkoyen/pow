// Generated by CoffeeScript 1.10.0
(function() {
  var HttpServer, RackApplication, connect, dirname, fs, join, pause, ref, request, url, version,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require("fs");

  url = require("url");

  connect = require("connect");

  request = require("request");

  RackApplication = require("./rack_application");

  pause = require("./util").pause;

  ref = require("path"), dirname = ref.dirname, join = ref.join;

  version = JSON.parse(fs.readFileSync(__dirname + "/../package.json", "utf8")).version;

  module.exports = HttpServer = (function(superClass) {
    var o, renderResponse, renderTemplate, x;

    extend(HttpServer, superClass);

    o = function(fn) {
      return function(req, res, next) {
        return fn(req, res, next);
      };
    };

    x = function(fn) {
      return function(err, req, res, next) {
        return fn(err, req, res, next);
      };
    };

    renderTemplate = function(templateName, renderContext, yieldContents) {
      var context, key, template, value;
      template = require("./templates/http_server/" + templateName + ".html");
      context = {
        renderTemplate: renderTemplate,
        yieldContents: yieldContents
      };
      for (key in renderContext) {
        value = renderContext[key];
        context[key] = value;
      }
      return template(context);
    };

    renderResponse = function(res, status, templateName, context) {
      if (context == null) {
        context = {};
      }
      res.writeHead(status, {
        "Content-Type": "text/html; charset=utf8",
        "X-Pow-Template": templateName
      });
      return res.end(renderTemplate(templateName, context));
    };

    function HttpServer(configuration) {
      this.configuration = configuration;
      this.handleWelcomeRequest = bind(this.handleWelcomeRequest, this);
      this.handleApplicationNotFound = bind(this.handleApplicationNotFound, this);
      this.handleRvmDeprecationRequest = bind(this.handleRvmDeprecationRequest, this);
      this.handleProxyRequest = bind(this.handleProxyRequest, this);
      this.findRackApplication = bind(this.findRackApplication, this);
      this.handleStaticRequest = bind(this.handleStaticRequest, this);
      this.findHostConfiguration = bind(this.findHostConfiguration, this);
      this.handlePowRequest = bind(this.handlePowRequest, this);
      this.logRequest = bind(this.logRequest, this);
      HttpServer.__super__.constructor.call(this, [o(this.logRequest), o(this.annotateRequest), o(this.handlePowRequest), o(this.findHostConfiguration), o(this.handleStaticRequest), o(this.findRackApplication), o(this.handleProxyRequest), o(this.handleRvmDeprecationRequest), o(this.handleApplicationRequest), x(this.handleErrorStartingApplication), o(this.handleFaviconRequest), o(this.handleApplicationNotFound), o(this.handleWelcomeRequest), o(this.handleRailsAppWithoutRackupFile), o(this.handleLocationNotFound)]);
      this.staticHandlers = {};
      this.rackApplications = {};
      this.requestCount = 0;
      this.accessLog = this.configuration.getLogger("access");
      this.on("close", (function(_this) {
        return function() {
          var application, ref1, results, root;
          ref1 = _this.rackApplications;
          results = [];
          for (root in ref1) {
            application = ref1[root];
            results.push(application.quit());
          }
          return results;
        };
      })(this));
    }

    HttpServer.prototype.toJSON = function() {
      return {
        pid: process.pid,
        version: version,
        requestCount: this.requestCount
      };
    };

    HttpServer.prototype.logRequest = function(req, res, next) {
      this.accessLog.info("[" + req.socket.remoteAddress + "] " + req.method + " " + req.headers.host + " " + req.url);
      this.requestCount++;
      return next();
    };

    HttpServer.prototype.annotateRequest = function(req, res, next) {
      var host, ref1;
      host = (ref1 = req.headers.host) != null ? ref1.replace(/(\.$)|(\.?:.*)/, "") : void 0;
      req.pow = {
        host: host
      };
      return next();
    };

    HttpServer.prototype.handlePowRequest = function(req, res, next) {
      if (req.pow.host !== "pow") {
        return next();
      }
      switch (req.url) {
        case "/config.json":
          res.writeHead(200);
          return res.end(JSON.stringify(this.configuration));
        case "/env.json":
          res.writeHead(200);
          return res.end(JSON.stringify(this.configuration.env));
        case "/status.json":
          res.writeHead(200);
          return res.end(JSON.stringify(this));
        default:
          return this.handleLocationNotFound(req, res, next);
      }
    };

    HttpServer.prototype.findHostConfiguration = function(req, res, next) {
      var resume;
      resume = pause(req);
      return this.configuration.findHostConfiguration(req.pow.host, (function(_this) {
        return function(err, domain, config) {
          if (config) {
            if (config.root) {
              req.pow.root = config.root;
            }
            if (config.url) {
              req.pow.url = config.url;
            }
            req.pow.domain = domain;
            req.pow.resume = resume;
          } else {
            resume();
          }
          return next(err);
        };
      })(this));
    };

    HttpServer.prototype.handleStaticRequest = function(req, res, next) {
      var base, handler, ref1, root;
      if ((ref1 = req.method) !== "GET" && ref1 !== "HEAD") {
        return next();
      }
      if (!((root = req.pow.root) && typeof root === "string")) {
        return next();
      }
      if (req.url.match(/\.\./)) {
        return next();
      }
      handler = (base = this.staticHandlers)[root] != null ? base[root] : base[root] = connect["static"](join(root, "public"), {
        redirect: false
      });
      return handler(req, res, next);
    };

    HttpServer.prototype.findRackApplication = function(req, res, next) {
      var root;
      if (!(root = req.pow.root)) {
        return next();
      }
      return fs.exists(join(root, "config.ru"), (function(_this) {
        return function(rackConfigExists) {
          var application, base;
          if (rackConfigExists) {
            req.pow.application = (base = _this.rackApplications)[root] != null ? base[root] : base[root] = new RackApplication(_this.configuration, root, req.pow.host);
          } else if (application = _this.rackApplications[root]) {
            delete _this.rackApplications[root];
            application.quit();
          }
          return next();
        };
      })(this));
    };

    HttpServer.prototype.handleProxyRequest = function(req, res, next) {
      var headers, hostname, key, port, proxy, ref1, ref2, value;
      if (!req.pow.url) {
        return next();
      }
      ref1 = url.parse(req.pow.url), hostname = ref1.hostname, port = ref1.port;
      headers = {};
      ref2 = req.headers;
      for (key in ref2) {
        value = ref2[key];
        headers[key] = value;
      }
      headers['X-Forwarded-For'] = req.connection.address().address;
      headers['X-Forwarded-Host'] = req.pow.host;
      headers['X-Forwarded-Server'] = req.pow.host;
      proxy = request({
        method: req.method,
        url: "" + req.pow.url + req.url,
        headers: headers,
        jar: false,
        followRedirect: false
      });
      req.pipe(proxy);
      proxy.pipe(res);
      proxy.on('error', function(err) {
        return renderResponse(res, 500, "proxy_error", {
          err: err,
          hostname: hostname,
          port: port
        });
      });
      return req.pow.resume();
    };

    HttpServer.prototype.handleRvmDeprecationRequest = function(req, res, next) {
      var action, application, match;
      if (!(application = req.pow.application)) {
        return next();
      }
      if (match = req.url.match(/^\/__pow__\/rvm_deprecation(.*)/)) {
        action = match[1];
        if (!(action === "" || req.method === "POST")) {
          return next();
        }
        switch (action) {
          case "":
            true;
            break;
          case "/add_to_powrc":
            application.writeRvmBoilerplate();
            break;
          case "/enable":
            this.configuration.enableRvmDeprecationNotices();
            break;
          case "/disable":
            this.configuration.disableRvmDeprecationNotices();
            break;
          default:
            return next();
        }
        return renderResponse(res, 200, "rvm_deprecation_notice", {
          boilerplate: RackApplication.rvmBoilerplate
        });
      } else {
        return next();
      }
    };

    HttpServer.prototype.handleApplicationRequest = function(req, res, next) {
      var application;
      if (application = req.pow.application) {
        return application.handle(req, res, next, req.pow.resume);
      } else {
        return next();
      }
    };

    HttpServer.prototype.handleFaviconRequest = function(req, res, next) {
      if (req.url !== "/favicon.ico") {
        return next();
      }
      res.writeHead(200);
      return res.end();
    };

    HttpServer.prototype.handleApplicationNotFound = function(req, res, next) {
      var domain, host, name, pattern, ref1;
      if (req.pow.root) {
        return next();
      }
      host = req.pow.host;
      pattern = this.configuration.httpDomainPattern;
      if (!(domain = host != null ? (ref1 = host.match(pattern)) != null ? ref1[1] : void 0 : void 0)) {
        return next();
      }
      name = host.slice(0, host.length - domain.length);
      if (!name.length) {
        return next();
      }
      return renderResponse(res, 503, "application_not_found", {
        name: name,
        host: host
      });
    };

    HttpServer.prototype.handleWelcomeRequest = function(req, res, next) {
      var domain, domains;
      if (req.pow.root || req.url !== "/") {
        return next();
      }
      domains = this.configuration.domains;
      domain = indexOf.call(domains, "dev") >= 0 ? "dev" : domains[0];
      return renderResponse(res, 200, "welcome", {
        version: version,
        domain: domain
      });
    };

    HttpServer.prototype.handleRailsAppWithoutRackupFile = function(req, res, next) {
      var root;
      if (!(root = req.pow.root)) {
        return next();
      }
      return fs.exists(join(root, "config/environment.rb"), function(looksLikeRailsApp) {
        if (!looksLikeRailsApp) {
          return next();
        }
        return renderResponse(res, 503, "rackup_file_missing");
      });
    };

    HttpServer.prototype.handleLocationNotFound = function(req, res, next) {
      res.writeHead(404, {
        "Content-Type": "text/html"
      });
      return res.end("<!doctype html><html><body><h1>404 Not Found</h1>");
    };

    HttpServer.prototype.handleErrorStartingApplication = function(err, req, res, next) {
      var home, line, rest, root, stack, stackLines;
      if (!(root = req.pow.root)) {
        return next();
      }
      home = process.env.HOME;
      stackLines = (function() {
        var i, len, ref1, results;
        ref1 = err.stack.split("\n");
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          line = ref1[i];
          if (line.slice(0, home.length) === home) {
            results.push("~" + line.slice(home.length));
          } else {
            results.push(line);
          }
        }
        return results;
      })();
      if (stackLines.length > 10) {
        stack = stackLines.slice(0, 5);
        rest = stackLines.slice(5);
      } else {
        stack = stackLines;
      }
      return renderResponse(res, 500, "error_starting_application", {
        err: err,
        root: root,
        stack: stack,
        rest: rest
      });
    };

    return HttpServer;

  })(connect.HTTPServer);

}).call(this);
