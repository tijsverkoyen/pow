// Generated by CoffeeScript 1.10.0
(function() {
  var Log, Logger, dirname, fn, fs, i, len, level, mkdirp, ref,
    slice = [].slice;

  fs = require("fs");

  dirname = require("path").dirname;

  Log = require("log");

  mkdirp = require("./util").mkdirp;

  module.exports = Logger = (function() {
    Logger.LEVELS = ["debug", "info", "notice", "warning", "error", "critical", "alert", "emergency"];

    function Logger(path, level1) {
      this.path = path;
      this.level = level1 != null ? level1 : "debug";
      this.readyCallbacks = [];
    }

    Logger.prototype.ready = function(callback) {
      if (this.state === "ready") {
        return callback.call(this);
      } else {
        this.readyCallbacks.push(callback);
        if (!this.state) {
          this.state = "initializing";
          return mkdirp(dirname(this.path), (function(_this) {
            return function(err) {
              if (err) {
                return _this.state = null;
              } else {
                _this.stream = fs.createWriteStream(_this.path, {
                  flags: "a"
                });
                return _this.stream.on("open", function() {
                  var i, len, ref;
                  _this.log = new Log(_this.level, _this.stream);
                  _this.state = "ready";
                  ref = _this.readyCallbacks;
                  for (i = 0, len = ref.length; i < len; i++) {
                    callback = ref[i];
                    callback.call(_this);
                  }
                  return _this.readyCallbacks = [];
                });
              }
            };
          })(this));
        }
      }
    };

    return Logger;

  })();

  ref = Logger.LEVELS;
  fn = function(level) {
    return Logger.prototype[level] = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return this.ready(function() {
        return this.log[level].apply(this.log, args);
      });
    };
  };
  for (i = 0, len = ref.length; i < len; i++) {
    level = ref[i];
    fn(level);
  }

}).call(this);
