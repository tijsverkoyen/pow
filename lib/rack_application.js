// Generated by CoffeeScript 1.10.0
(function() {
  var RackApplication, async, basename, bufferLines, fs, join, nack, pause, ref, ref1, resolve, sourceScriptEnv;

  async = require("async");

  fs = require("fs");

  nack = require("nack");

  ref = require("./util"), bufferLines = ref.bufferLines, pause = ref.pause, sourceScriptEnv = ref.sourceScriptEnv;

  ref1 = require("path"), join = ref1.join, basename = ref1.basename, resolve = ref1.resolve;

  module.exports = RackApplication = (function() {
    function RackApplication(configuration, root, firstHost) {
      this.configuration = configuration;
      this.root = root;
      this.firstHost = firstHost;
      this.logger = this.configuration.getLogger(join("apps", basename(this.root)));
      this.readyCallbacks = [];
      this.quitCallbacks = [];
      this.statCallbacks = [];
    }

    RackApplication.prototype.ready = function(callback) {
      if (this.state === "ready") {
        return callback();
      } else {
        this.readyCallbacks.push(callback);
        return this.initialize();
      }
    };

    RackApplication.prototype.quit = function(callback) {
      if (this.state) {
        if (callback) {
          this.quitCallbacks.push(callback);
        }
        return this.terminate();
      } else {
        return typeof callback === "function" ? callback() : void 0;
      }
    };

    RackApplication.prototype.queryRestartFile = function(callback) {
      return fs.stat(join(this.root, "tmp/restart.txt"), (function(_this) {
        return function(err, stats) {
          var lastMtime;
          if (err) {
            _this.mtime = null;
            return callback(false);
          } else {
            lastMtime = _this.mtime;
            _this.mtime = stats.mtime.getTime();
            return callback(lastMtime !== _this.mtime);
          }
        };
      })(this));
    };

    RackApplication.prototype.setPoolRunOnceFlag = function(callback) {
      if (!this.statCallbacks.length) {
        fs.exists(join(this.root, "tmp/always_restart.txt"), (function(_this) {
          return function(alwaysRestart) {
            var i, len, ref2, statCallback;
            _this.pool.runOnce = alwaysRestart;
            ref2 = _this.statCallbacks;
            for (i = 0, len = ref2.length; i < len; i++) {
              statCallback = ref2[i];
              statCallback();
            }
            return _this.statCallbacks = [];
          };
        })(this));
      }
      return this.statCallbacks.push(callback);
    };

    RackApplication.prototype.loadScriptEnvironment = function(env, callback) {
      return async.reduce([".powrc", ".envrc", ".powenv"], env, (function(_this) {
        return function(env, filename, callback) {
          var script;
          return fs.exists(script = join(_this.root, filename), function(scriptExists) {
            if (scriptExists) {
              return sourceScriptEnv(script, env, callback);
            } else {
              return callback(null, env);
            }
          });
        };
      })(this), callback);
    };

    RackApplication.prototype.loadRvmEnvironment = function(env, callback) {
      var script;
      return fs.exists(script = join(this.root, ".rvmrc"), (function(_this) {
        return function(rvmrcExists) {
          var rvm;
          if (rvmrcExists) {
            return fs.exists(rvm = _this.configuration.rvmPath, function(rvmExists) {
              var before, libexecPath;
              if (rvmExists) {
                libexecPath = resolve(__dirname + "/../libexec");
                before = ("'" + libexecPath + "/pow_rvm_deprecation_notice' '" + [_this.firstHost] + "'\nsource '" + rvm + "' > /dev/null").trim();
                return sourceScriptEnv(script, env, {
                  before: before
                }, callback);
              } else {
                return callback(null, env);
              }
            });
          } else {
            return callback(null, env);
          }
        };
      })(this));
    };

    RackApplication.prototype.loadEnvironment = function(callback) {
      return this.queryRestartFile((function(_this) {
        return function() {
          return _this.loadScriptEnvironment(_this.configuration.env, function(err, env) {
            if (err) {
              return callback(err);
            } else {
              return _this.loadRvmEnvironment(env, function(err, env) {
                if (err) {
                  return callback(err);
                } else {
                  return callback(null, env);
                }
              });
            }
          });
        };
      })(this));
    };

    RackApplication.prototype.initialize = function() {
      if (this.state) {
        if (this.state === "terminating") {
          this.quit((function(_this) {
            return function() {
              return _this.initialize();
            };
          })(this));
        }
        return;
      }
      this.state = "initializing";
      return this.loadEnvironment((function(_this) {
        return function(err, env) {
          var i, len, readyCallback, ref2, ref3, ref4;
          if (err) {
            _this.state = null;
            _this.logger.error(err.message);
            _this.logger.error("stdout: " + err.stdout);
            _this.logger.error("stderr: " + err.stderr);
          } else {
            _this.state = "ready";
            _this.pool = nack.createPool(join(_this.root, "config.ru"), {
              env: env,
              size: (ref2 = env != null ? env.POW_WORKERS : void 0) != null ? ref2 : _this.configuration.workers,
              idle: ((ref3 = env != null ? env.POW_TIMEOUT : void 0) != null ? ref3 : _this.configuration.timeout) * 1000
            });
            bufferLines(_this.pool.stdout, function(line) {
              return _this.logger.info(line);
            });
            bufferLines(_this.pool.stderr, function(line) {
              return _this.logger.warning(line);
            });
            _this.pool.on("worker:spawn", function(process) {
              return _this.logger.debug("nack worker " + process.child.pid + " spawned");
            });
            _this.pool.on("worker:exit", function(process) {
              return _this.logger.debug("nack worker exited");
            });
          }
          ref4 = _this.readyCallbacks;
          for (i = 0, len = ref4.length; i < len; i++) {
            readyCallback = ref4[i];
            readyCallback(err);
          }
          return _this.readyCallbacks = [];
        };
      })(this));
    };

    RackApplication.prototype.terminate = function() {
      if (this.state === "initializing") {
        return this.ready((function(_this) {
          return function() {
            return _this.terminate();
          };
        })(this));
      } else if (this.state === "ready") {
        this.state = "terminating";
        return this.pool.quit((function(_this) {
          return function() {
            var i, len, quitCallback, ref2;
            _this.state = null;
            _this.mtime = null;
            _this.pool = null;
            ref2 = _this.quitCallbacks;
            for (i = 0, len = ref2.length; i < len; i++) {
              quitCallback = ref2[i];
              quitCallback();
            }
            return _this.quitCallbacks = [];
          };
        })(this));
      }
    };

    RackApplication.prototype.handle = function(req, res, next, callback) {
      return this.ready((function(_this) {
        return function(err) {
          if (err) {
            return next(err);
          }
          return _this.setPoolRunOnceFlag(function() {
            return _this.restartIfNecessary(function() {
              req.proxyMetaVariables = {
                SERVER_PORT: _this.configuration.dstPort.toString()
              };
              try {
                return _this.pool.proxy(req, res, function(err) {
                  if (err) {
                    _this.quit();
                  }
                  return next(err);
                });
              } finally {
                if (typeof callback === "function") {
                  callback();
                }
              }
            });
          });
        };
      })(this));
    };

    RackApplication.prototype.restart = function(callback) {
      return this.quit((function(_this) {
        return function() {
          return _this.ready(callback);
        };
      })(this));
    };

    RackApplication.prototype.restartIfNecessary = function(callback) {
      return this.queryRestartFile((function(_this) {
        return function(mtimeChanged) {
          if (mtimeChanged) {
            return _this.restart(callback);
          } else {
            return callback();
          }
        };
      })(this));
    };

    RackApplication.prototype.writeRvmBoilerplate = function() {
      var boilerplate, powrc;
      powrc = join(this.root, ".powrc");
      boilerplate = this.constructor.rvmBoilerplate;
      return fs.readFile(powrc, "utf8", function(err, contents) {
        if (contents == null) {
          contents = "";
        }
        if (contents.indexOf(boilerplate) === -1) {
          return fs.writeFile(powrc, boilerplate + "\n" + contents);
        }
      });
    };

    RackApplication.rvmBoilerplate = "if [ -f \"$rvm_path/scripts/rvm\" ] && [ -f \".rvmrc\" ]; then\n  source \"$rvm_path/scripts/rvm\"\n  source \".rvmrc\"\nfi";

    return RackApplication;

  })();

}).call(this);
